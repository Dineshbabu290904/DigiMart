/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-10-17 17:08:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.digimart.project.ConnectionProvider;

public final class bill_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.digimart.project.ConnectionProvider");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // Initialize variables for user details and cart
    String customerName = "", customerEmail = "", customerMobile = "", streetAddress = "",
           customerCity = "", customerState = "", customerCountry = "", customerPincode = "";
    double totalAmount = 0.0;
    StringBuilder cartItemsHtml = new StringBuilder();
    int serialNo = 1;

    // Get user ID from session
    Integer userId = (Integer) session.getAttribute("user_id");

    if (userId == null) {
        response.sendRedirect("login.jsp"); // Redirect to login if user_id is null
        return;
    }
    customerEmail = (String) session.getAttribute("email"); // Retrieve email from session
    try (Connection con = ConnectionProvider.getCon()) {
    	String Query = "update cart set status = ? where user_id=? and status='active'";
        // Retrieve address information
        String addressQuery = "SELECT full_name, phone_number, street_address, city, state, postal_code, country " +
                              "FROM address WHERE user_id = ? AND is_default = TRUE";
        try (PreparedStatement addressStmt = con.prepareStatement(addressQuery)) {
            addressStmt.setInt(1, userId);
            ResultSet addressRs = addressStmt.executeQuery();

            if (addressRs.next()) {
                customerName = addressRs.getString("full_name");
                customerMobile = addressRs.getString("phone_number");
                streetAddress = addressRs.getString("street_address");
                customerCity = addressRs.getString("city");
                customerState = addressRs.getString("state");
                customerCountry = addressRs.getString("country");
                customerPincode = addressRs.getString("postal_code");
            }
        }
        try (PreparedStatement addressStmt1 = con.prepareStatement(Query)) {
            addressStmt1.setString(1, "bill");
            addressStmt1.setInt(2, userId);

            // Use executeUpdate() for UPDATE, INSERT, DELETE queries
            int affectedRows = addressStmt1.executeUpdate();
            // Optionally check affected rows
            if (affectedRows > 0) {
                // Update was successful
            }
        }
        String cartQuery = "SELECT c.quantity, p.name, p.category, p.price_per_unit " +
                "FROM cart c LEFT JOIN products p ON c.product_id = p.product_id " +
                "WHERE c.user_id = ?";

        try (PreparedStatement cartStmt = con.prepareStatement(cartQuery)) {
            cartStmt.setInt(1, userId);
            ResultSet cartRs = cartStmt.executeQuery();

            while (cartRs.next()) {
                String productName = cartRs.getString("name");
                String category = cartRs.getString("category");
                double price = cartRs.getDouble("price_per_unit");
                int quantity = cartRs.getInt("quantity");
                double subTotal = price * quantity;

                totalAmount += subTotal; // Accumulate total amount

                // Create a row in HTML for each cart item
                cartItemsHtml.append("<tr>")
                              .append("<td>").append(serialNo++).append("</td>")
                              .append("<td>").append(productName).append("</td>")
                              .append("<td>").append(category).append("</td>")
                              .append("<td>").append(price).append("</td>")
                              .append("<td>").append(quantity).append("</td>")
                              .append("<td>").append(subTotal).append("</td>")
                              .append("</tr>");
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        out.println("<h3>An error occurred while retrieving your bill.</h3>");
        return;
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/bill.css\">\r\n");
      out.write("    <title>Bill</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>Online Shopping Bill (BTech Days)</h3>\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<!-- Address Information -->\r\n");
      out.write("<div class=\"left-div\"><h3>Name: </h3><h3>");
      out.print( customerName );
      out.write("</h3></div>\r\n");
      out.write("<div class=\"right-div-right\"><h3>Email: </h3><h3>");
      out.print( customerEmail );
      out.write("</h3></div>\r\n");
      out.write("<div class=\"right-div\"><h3>Mobile Number: </h3><h3>");
      out.print( customerMobile );
      out.write("</h3></div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"left-div\"><h3>Order Date: </h3><h3>");
      out.print( new java.util.Date() );
      out.write("</h3></div>\r\n");
      out.write("<div class=\"right-div-right\"><h3>Payment Method: </h3><h3>Cash on Delivery</h3></div>\r\n");
      out.write("<div class=\"right-div\"><h3>Expected Delivery: </h3><h3>");
      out.print( new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date(System.currentTimeMillis() + 7 * 24 * 60 * 60 * 1000)) );
      out.write("</h3></div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"left-div\"><h3>Transaction Id: </h3><h3>TXN123456789</h3></div>\r\n");
      out.write("<div class=\"right-div-right\"><h3>City: </h3><h3>");
      out.print( customerCity );
      out.write("</h3></div>\r\n");
      out.write("<div class=\"right-div\"><h3>Address: </h3><h3>");
      out.print( streetAddress );
      out.write("</h3></div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"left-div\"><h3>State: </h3><h3>");
      out.print( customerState );
      out.write("</h3></div>\r\n");
      out.write("<div class=\"right-div-right\"><h3>Country: </h3><h3>");
      out.print( customerCountry );
      out.write("</h3></div>\r\n");
      out.write("<div class=\"right-div\"><h3>Pincode: </h3><h3>");
      out.print( customerPincode );
      out.write("</h3></div>\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("<!-- Product Details Table -->\r\n");
      out.write("<table id=\"customers\">\r\n");
      out.write("    <h3>Product Details</h3>\r\n");
      out.write("    <tr>\r\n");
      out.write("        <th>S.No</th>\r\n");
      out.write("        <th>Product Name</th>\r\n");
      out.write("        <th>Category</th>\r\n");
      out.write("        <th>Price</th>\r\n");
      out.write("        <th>Quantity</th>\r\n");
      out.write("        <th>Sub Total</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    \r\n");
      out.write("    <!-- Dynamically populated cart items -->\r\n");
      out.write("    ");
      out.print( cartItemsHtml.toString() );
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<h3>Total: ");
      out.print( totalAmount );
      out.write("</h3>\r\n");
      out.write("\r\n");
      out.write("<!-- Buttons -->\r\n");
      out.write("<a href=\"continueShopping.jsp\"><button class=\"button left-button\">Continue Shopping</button></a>\r\n");
      out.write("<a onclick=\"window.print();\"><button class=\"button right-button\">Print</button></a>\r\n");
      out.write("<br><br><br><br>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
