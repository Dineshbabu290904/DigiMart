package com.digimart.Servlet;


import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.digimart.project.ConnectionProvider;

@WebServlet("/ChangePassword")
public class ChangePasswordServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        Integer userId = (Integer) session.getAttribute("user_id");

        if (userId == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        String oldPassword = request.getParameter("oldPassword");
        String newPassword = request.getParameter("newPassword");
        String confirmPassword = request.getParameter("confirmPassword");

        // Input validation
        if (!newPassword.equals(confirmPassword)) {
            request.setAttribute("error", "New password and confirm password do not match.");
            request.getRequestDispatcher("changeDetails.jsp").forward(request, response);
            return;
        }

        try (Connection con = ConnectionProvider.getCon()) {
            // Check if the old password is correct
            String checkPasswordQuery = "SELECT password FROM users WHERE user_id = ?";
            try (PreparedStatement checkPasswordStmt = con.prepareStatement(checkPasswordQuery)) {
                checkPasswordStmt.setInt(1, userId);
                ResultSet rs = checkPasswordStmt.executeQuery();

                if (rs.next()) {
                    String dbOldPassword = rs.getString("password");
                    // You should use hashing for password verification in production
                    if (!dbOldPassword.equals(oldPassword)) {
                        request.setAttribute("error", "Your old password is incorrect.");
                        request.getRequestDispatcher("changeDetails.jsp").forward(request, response);
                        return;
                    }
                }
            }

            // Update password
            String updatePasswordQuery = "UPDATE users SET password = ? WHERE user_id = ?";
            try (PreparedStatement updatePasswordStmt = con.prepareStatement(updatePasswordQuery)) {
                updatePasswordStmt.setString(1, newPassword); // Remember to hash this in production!
                updatePasswordStmt.setInt(2, userId);
                int rowsUpdated = updatePasswordStmt.executeUpdate();

                if (rowsUpdated > 0) {
                    request.setAttribute("success", "Password changed successfully!");
                } else {
                    request.setAttribute("error", "Something went wrong! Try again.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "An error occurred while processing your request.");
        }

        request.getRequestDispatcher("changeDetails.jsp").forward(request, response);
    }
}
